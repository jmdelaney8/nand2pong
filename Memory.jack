// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int free_list;
    static int heap_base;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heap_base = 2048;
        let free_list = heap_base;
        do Memory.poke(free_list, 24576 - heap_base);
        do Memory.poke(free_list + 1, 0);
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // First fit algo
        var int block, next_free, prev_free, free, free_size;
        let free = free_list;
        let prev_free = 0;
        // assume we can't run out of memory
        if (Memory.peek(free) < size) {
            let prev_free = free;
            let free = Memory.peek(free + 1);
        }
        else {
            let block = free + 1;
            let next_free = Memory.peek(free + 1);
            let free_size = Memory.peek(free);
            // Initialize remaining free block
            if ((free_size - size) > 1) {  // free has surplus
                let free = free + size + 1;
                if ((block - 1) = free_list) {
                    let free_list = free;
                }
                // Initialize remaining free block
                do Memory.poke(free, free_size - size - 1);
                do Memory.poke(free + 1, next_free);
                // Update previous link in list
                if (prev_free > 0) {
                    do Memory.poke(prev_free + 1, free);
                }
                // Update blocks size
                do Memory.poke(block - 1, size + 1);
            }
            else {  // free doesn't have surplus
                do Memory.poke(prev_free + 1, next_free);
                // TODO: Chance that we need to update free list?
            }

        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int free, next_free;
        do Memory.poke(o, 0);  // will be the end of the free list
        let free = free_list;
        let next_free = Memory.peek(free + 1);
        while (next_free > 1) {
            let free = next_free;
            let next_free = Memory.peek(free + 1);
        }
        do Memory.poke(free + 1, o - 1);
        return;
    }    
}
