// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array two_to_the;
    static int temp_div, q_temp;

    /** Initializes the library. */
    function void init() {
        var int i;
        let i = 1;
        let two_to_the = Array.new(16);
        let two_to_the[0] = 1;
        let temp_div = 0;
        while (i < 16) {
            let two_to_the[i] = two_to_the[i - 1] + two_to_the[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int out;
        if (x < 0) {
            let out = -x;
        }
        else {
            let out = x;
        }
        return out;
    }

    function boolean bit(int x, int i) {
        // TODO: how to get this?
        return x & two_to_the[i];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted_x, i;
        let sum = 0;
        let shifted_x = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        // TODO: I don't know how to turn this 2 * y * q mult into addition
        var bool x_neg, y_neg;
        var int out;

        let x_neg = x < 0;
        let y_neg = y < 0;
        if (x_neg) {
            let x = Math.abs(x);
        }
        if (y_neg) {
            let y = Math.abs(y);
        }
        let temp_div = 0;
        let q_temp = 0;
        let out = Math.div(x, y);
        if ((x_neg & ~y_neg) | (~x_neg & y_neg)) {
            return -out;
        }
        else {
            return out;
        }
    }

    function int div(int x, int y) {
        var int q, out;
        if (y > x) {
            return 0;
        }
        if (y + y < 0) {  // Check for overflow
            return 1;
        }
        let q = Math.div(x, y + y);
        if (q = 1) {
            let temp_div = y + y;
        }
        else {
            if (q_temp = 1) {
                let temp_div = temp_div + y + y;
            }
        }
        if ((x - temp_div) < y) {
            let out = q + q;
            let q_temp = 0;
        }
        else {
            let out = q + q + 1;
            let q_temp = 1;
        }
        return out;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp;
        let y = 0;
        let j = 7;
        while (j > -1) {
            let temp = y + two_to_the[j];
            if ((~((temp * temp) > x)) & ((temp * temp) > 0)) {
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } 
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
