// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean current_color;
    static int screen;
    static Array two_to_the;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let screen = 16384;
        let current_color = true;  // black
        let i = 1;
        let two_to_the = Array.new(16);
        let two_to_the[0] = 1;
        while (i < 16) {
            let two_to_the[i] = two_to_the[i - 1] + two_to_the[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        // TODO: This is wrong, need to iterate through more addresses.
        var int addr;
        let addr = screen;
        while (addr < screen + 8192) {
            do Memory.poke(addr, 0);
            let addr = addr + 16;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let current_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, bit, val, mask, i;
        let addr = screen + (y * 32) + (x / 16);
        let bit = x - ((x / 16) * 16);
        let val = Memory.peek(addr);
        let i = 0;
        let mask = two_to_the[bit];
        if (current_color) {  // black
            let val = val | mask;
        }
        else {  // white
            let val = (~mask) & val;
        }
        do Memory.poke(addr, val);
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int dx, a, addr, mask, segment_start, val, segment_end;
        let dx = x2 - x1;
        let a = 0;
        while (a < dx) {
            // TODO: need to account for case where line end is inside a 16 bit address.
            let addr = screen + (y * 32) + ((x1 + a) / 16);
            let segment_start = (x1 + a) - (((x1 + a) / 16) * 16);  // (x1 + a) % 16;
            let segment_end = segment_start + (dx - a);
            if (segment_end < 16) {
                let mask = two_to_the[segment_end] - 1;
                let a = dx;
            }
            else {
                let mask = -1;
                let a = a + 16 - segment_start;
            }
            if (segment_start = 0) {
                let mask = -1 & mask;
            }
            else {
                let mask = mask & -two_to_the[16 - segment_start];
            }
            let val = Memory.peek(addr);
            if (current_color) {
                let val = val | mask;
            }
            else {
                let val = (~mask) & val;
            }
            do Memory.poke(addr, val);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // TODO: Make special casses more efficient with whole address writes?
        var int x, y, dx, dy;
        var int a, b, diff;
        var int mask;
        if (x1 < x2) {
            let x = x1;
            let y = y1;
            let dx = x2 - x1;
            let dy = y2 - y1;
        }
        else {
            let x = x2;
            let y = y2;
            let dx = x1 - x2;
            let dy = y1 - y2;
        }
        let a = 0;
        let b = 0;
        let diff = 0;
        if (dy = 0) {
            if (x1 < x2) {
                do Screen.drawHorizontalLine(x1, x2, y1);
            }
            else {
                do Screen.drawHorizontalLine(x2, x1, y1);
            }
        }
        else {
            if (dy < 0) {
                if (dx = 0) {
                    while (b > dy) {
                        do Screen.drawPixel(x, y + b);
                        let b = b - 1;
                    }
                }
                else {
                    while ((a < dx) & (b > dy)) {
                        do Screen.drawPixel(x + a, y + b);
                        if (diff < 0) {
                            let a = a + 1;
                            let diff = diff - dy;
                        }
                        else {
                            let b = b - 1;
                            let diff = diff - dx;
                        }
                    }
                }
            }    
            else {
                if (dx = 0) {
                    while (b < dy) {
                        do Screen.drawPixel(x, y + b);
                        let b = b + 1;
                    }
                }
                else {
                    while ((a < dx) & (b < dy)) {
                        do Screen.drawPixel(x + a, y + b);
                        if (diff < 0) {
                            let a = a + 1;
                            let diff = diff + dy;
                        }
                        else {
                            let b = b + 1;
                            let diff = diff - dx;
                        }
                    }
                }

            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (y < (y2 + 1)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        if (r < 182) {
            let dy = -r;
            while (dy < (r + 1)) {
                do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);
                let dy = dy + 1;
            }
        }
        return;
    }
}
